library(ggtern, dplyr)
dat <- read.csv("data/QBS.count.soil.csv")
textures <- ggtern(
data= dat, aes(
x = Sand,
y = Clay,
z = Silt
)) +
geom_point(
aes(color=Treatment),
size=2,alpha=0.5
)+
labs(
title="Harper Adams Conservation Agriculture Experiment",
subtitle="Treatment soil textures",
color="Treatment"
)+
theme_bw()
textures
textures_cust<-textures+
labs(
yarrow = "Clay (%)",
zarrow = "Silt (%)",
xarrow = "Sand (%)"
)+
theme_showarrows()+        # Add arrows to axis titles
theme_hidetitles()+
theme_clockwise()          # Direction of ternary rotation
textures_cust
data(USDA) # Load USDA
head(USDA)
textures_classes<-textures_cust+
geom_polygon(
data=USDA,aes(x=Sand,y=Clay,z=Silt,group=Label),
fill=NA,size = 0.3,alpha=0.5,
color = "grey30"
)
textures_classes
USDA_text <- USDA  %>%
group_by(Label) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
head(USDA_text)
data(USDA) # Load USDA
head(USDA)
textures_classes<-textures_cust+
geom_polygon(
data=USDA,aes(x=Sand,y=Clay,z=Silt,group=Label),
fill=NA,size = 0.3,alpha=0.5,
color = "grey30"
)
textures_classes
USDA_text <- USDA  %>%
group_by(Label) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
library(ggtern, dplyr)
USDA_text <- USDA  %>%
group_by(Label) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
library(dplyr)
dat <- read.csv("data/QBS.count.soil.csv")
textures <- ggtern(
data= dat, aes(
x = Sand,
y = Clay,
z = Silt
)) +
geom_point(
aes(color=Treatment),
size=2,alpha=0.5
)+
labs(
title="Harper Adams Conservation Agriculture Experiment",
subtitle="Treatment soil textures",
color="Treatment"
)+
theme_bw()
textures
textures_cust<-textures+
labs(
yarrow = "Clay (%)",
zarrow = "Silt (%)",
xarrow = "Sand (%)"
)+
theme_showarrows()+        # Add arrows to axis titles
theme_hidetitles()+
theme_clockwise()          # Direction of ternary rotation
textures_cust
data(USDA) # Load USDA
head(USDA)
textures_classes<-textures_cust+
geom_polygon(
data=USDA,aes(x=Sand,y=Clay,z=Silt,group=Label),
fill=NA,size = 0.3,alpha=0.5,
color = "grey30"
)
textures_classes
USDA_text <- USDA  %>%
group_by(Label) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
head(USDA_text)
#open png for file save and define size and resolution
png(paste("plots/", "soil texture plot by treatment", ".png", sep=""),
width=1200, height=900, res=150)
textures_names<-textures_classes+
geom_text(
data=USDA_text,
aes(x=Sand,y=Clay,z=Silt,label=Label),
size = 2,
color = "grey30"
) +
theme(legend.position = c(0.8, 0.8), legend.title = element_text(colour="black", size=10, face="bold"),
legend.text = element_text(colour="black", size=10,face="bold"),
legend.background = element_rect(size=0.5, linetype="solid", colour ="darkblue"))
textures_names
dev.off() # turn dev off
source(file = "scripts/packages.R")
dat <- read.csv("data/QBS.count.soil.csv")
f1 <-  readOGR(
dsn= "/Users/u1764794/OneDrive - Harper Adams University/GHG field experiment/Shapefiles/Field Boundaries/" ,
layer="Field_1_Boundary",
verbose=FALSE
)
f2 <-  readOGR(
dsn= "/Users/u1764794/OneDrive - Harper Adams University/GHG field experiment/Shapefiles/Field Boundaries/" ,
layer="Field_2_Boundary",
verbose=FALSE
)
dat$Treatment <- as.factor(dat$Treatment)
# filter to CA system
datCA <- data %>% filter(Treatment == "Conservation")
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = long, y = lat), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = long, y = lat), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Bulk Density", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
# BNG to WGS-84 for spatial grid
DT1_sf <- st_as_sf(f1, coords = c("x","y"),crs=27700)
class(DT1_sf)
DT1_sf_4326 <- DT1_sf %>% st_transform(crs = 4326)
f1$ycoord <- st_coordinates(DT1_sf_4326)[,2]
dat <- read.csv("data/QBS.count.soil.csv")
f1 <-  readOGR(
dsn= "/Users/u1764794/OneDrive - Harper Adams University/GHG field experiment/Shapefiles/Field Boundaries/" ,
layer="Field_1_Boundary",
verbose=FALSE
)
f2 <-  readOGR(
dsn= "/Users/u1764794/OneDrive - Harper Adams University/GHG field experiment/Shapefiles/Field Boundaries/" ,
layer="Field_2_Boundary",
verbose=FALSE
)
dat$Treatment <- as.factor(dat$Treatment)
f14326 <- st_transform(f1, crs = 4326)
crs(f1)
## 04.2 change grid CRS ####
f1 <- st_as_sf(f1, crs = 27700)
f14326 <- st_transform(f1, crs = 4326)
## 04.2 change grid CRS ####
f1 <- st_as_sf(f1, crs = 27700)
f1 <- st_transform(f1, crs = 4326)
f2 <- st_as_sf(f2, crs = 27700)
f2 <- st_transform(f2, crs = 4326)
# BNG to WGS-84 for spatial grid
dat <- st_as_sf(dat, coords = c("x","y"),crs=27700)
dat <- st_transform(dat, crs = 4326)
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = long, y = lat), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = long, y = lat), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
View(f1)
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = x, y = y), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = x, y = y), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = Longitude, y = y), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = x, y = y), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
View(dat)
dat <- read.csv("data/QBS.count.soil.csv")
View(dat)
source("~/Library/CloudStorage/OneDrive-HarperAdamsUniversity/Data/2022 beans/soil.texture/scripts/packages.R")
dat <- read.csv("data/QBS.count.soil.csv")
f1 <-  readOGR(
dsn= "/Users/u1764794/OneDrive - Harper Adams University/GHG field experiment/Shapefiles/Field Boundaries/" ,
layer="Field_1_Boundary",
verbose=FALSE
)
f2 <-  readOGR(
dsn= "/Users/u1764794/OneDrive - Harper Adams University/GHG field experiment/Shapefiles/Field Boundaries/" ,
layer="Field_2_Boundary",
verbose=FALSE
)
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = Longitude, y = y), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = x, y = y), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = Longitude, y = Latitude), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = x, y = y), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = x, y = y), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = x, y = y), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = long, y = lat), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = long, y = lat), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
#open png for file save and define size and resolution
png(paste("plots/", "texture spatial plot", ".png", sep=""),
width=1200, height=900, res=150)
ggplot(data = dat, aes( x = x, y = y)) +
geom_polygon(data = f1, aes( x = long, y = lat), fill = "white", color = "black")+
geom_polygon(data = f2, aes( x = long, y = lat), fill = "white", color = "black")+
geom_point(aes(color = Treatment))+
ggtitle(label = "Soil Texture", subtitle = "Sample time: 01/10/2022") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(size = 14, face = "bold")) +
theme(axis.title.y = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 12, face = "bold")) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
dev.off() # turn dev off
